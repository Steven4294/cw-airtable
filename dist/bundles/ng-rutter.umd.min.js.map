{"version":3,"sources":["ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.service.ts","ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.component.ts","ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.module.ts"],"names":["Injectable","args","providedIn","NgRutterService","options","_this","this","observable","Observable","create","observer","prototype","open","loadRutter","onSuccess","onLoad","onExit","Rutter","publicKey","PUBLIC_API_KEY","publicToken","console","log","next","name","NgRutterEventType","data","token","setup","Promise","resolve","reject","get","url","destroy","subscriber","unsubscribe","NgRutterServiceOptions","NgRutterComponent","rutterService","EventEmitter","load","emit","ngOnInit","Component","selector","template","styles","Input","Output","NgRutterModule","forRoot","ngModule","providers","provide","FOR_ROOT_OPTIONS_TOKEN","useValue","useFactory","provideMyServiceOptions","deps","NgModule","imports","CommonModule","declarations","exports","InjectionToken","serviceOptions"],"mappings":"uYAcW,YACH,SACA,qDAOyB,8BAJhCA,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,gIA6DZ,SAAAC,EAAaC,GAAb,IAAAC,EAAAC,cA/CM,+CAgDLA,KAAKF,QAAUA,EACfE,KAAKC,WAAaC,EAAAA,WAAWC,OAAO,SAACC,GACpCL,EAAKK,SAAWA,WAhDlBP,EAAAQ,UAAAC,KAAA,WACCN,KAAKO,WAAW,aAAU,aAAU,eAGrCV,EAAAQ,UAAAE,WAAA,SAAWC,EAAWC,EAAQC,GAA9B,IAAAX,EAAAC,KAEsBW,OAAOR,OAAO,CAClCS,UAAWZ,KAAKF,QAAQe,eACxBL,UAAW,SAACM,GACXC,QAAQC,IAAI,iBAAiBjB,EAAKK,UAElCL,EAAKK,SAASa,KAAK,CAElBC,KAAMC,EACNC,KAAM,CACLC,MAAOP,KAGTN,EAAUM,IAEXL,OAAQ,WACPV,EAAKK,SAASa,KAAK,CAClBC,KAAMC,IAEPV,KAEDC,OAAQ,WACPX,EAAKK,SAASa,KAAK,CAClBC,KAAMC,IAEPT,OAIaJ,QAGhBT,EAAAQ,UAAAiB,MAAA,WAAA,IAAAvB,EAAAC,KACC,OAAO,IAAIuB,QAAQ,SAACC,EAASC,GAC5BC,EAAAA,IAAI3B,EAAK4B,IAAK,WACbH,SAYH3B,EAAAQ,UAAAuB,QAAA,SAAQC,GACPA,EAAWC,mCA/DZpC,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDAsDUmC,0HCjFvBC,EAAA,WAoCE,SAAAA,EAAoBC,GAAAjC,KAAAiC,cAAAA,YAtBJ,8BACW,kBACV,sBAEK,IAAIC,EAAAA,yBACP,IAAIA,EAAAA,yBACJ,IAAIA,EAAAA,oBAEvBF,EAAA3B,UAAA8B,KAAA,WAAA,IAAApC,EAAAC,KACEA,KAAKiC,cAAc1B,WAAW,SAACO,GAC7Bf,EAAKS,UAAU4B,KAAKtB,IACnB,WACDf,EAAKU,OAAO2B,QACX,WACDrC,EAAKW,OAAO0B,UAIhBJ,EAAA3B,UAAAgC,SAAA,WACErC,KAAKiC,cAAcX,6BA9BtBgB,EAAAA,UAAS3C,KAAA,CAAC,CACT4C,SAAU,YACVC,SAAU,+HAKVC,OAAQ,CAAC,8bATF5C,mCAaN6C,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,yBAEAC,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,YApBH,GCAAC,EAAA,gCAuBSA,EAAAC,QAAP,SAAgB/C,GAEhB,MAAA,CACCgD,SAAUF,EACVG,UAAW,CACV,CACCC,QAASC,EACTC,SAAUpD,GAEX,CACCkD,QAASjB,EACToB,WAAYC,EACZC,KAAM,CAAEJ,2BA5BZK,EAAAA,SAAQ3D,KAAA,CAAC,CACR4D,QAAS,CACPC,EAAAA,cAEFT,UAAW,CACZlD,GAEC4D,aAAc,CACZzB,GAEF0B,QAAS,CACV1B,SAlBD,GAgDWiB,EAAyB,IAAIU,EAAAA,eAA+B,sCAEvE,SAAAP,EAAyCtD,GAExC,IAAI8D,EAAiB,IAAI7B,EAQzB,OAPKjC,GAEsC,iBAA7BA,EAAsB,iBAClC8D,EAAe/C,eAAiBf,EAAQe,gBAI1C","sourcesContent":["// Import the core angular services.\nimport { Injectable } from \"@angular/core\";\nimport { get } from 'scriptjs';\nimport { Observer, Observable, Subscription, of } from \"rxjs\";\nimport { filter, share } from 'rxjs/operators'\n\ndeclare var Rutter: any;\n\nexport interface NgRutterEvent {\n\tname: string\n\tdata?: any\n}\n\nexport enum NgRutterEventType {\n\tSUCCESS = 'SUCCESS',\n\tLOAD = 'LOAD',\n\tEXIT = 'EXIT',\n}\n\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class NgRutterServiceOptions {\n\tpublic PUBLIC_API_KEY: string = '';\n}\n\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class NgRutterService {\n \n\tpublic options: NgRutterServiceOptions;\n\tpublic observable: Observable<NgRutterEvent>;\n\tpublic observer: Observer<any>\n\turl = 'https://unpkg.com/@rutter/rutter-link@latest';\n\n\topen() {\n\t\tthis.loadRutter(() => {}, () => {}, () => {})\n\t}\n\n\tloadRutter(onSuccess, onLoad, onExit) {\n\n\t\tvar rutterInstance = Rutter.create({\n\t\t\tpublicKey: this.options.PUBLIC_API_KEY,\n\t\t\tonSuccess: (publicToken) => {\n\t\t\t\tconsole.log(`inner success ${this.observer}`)\n\n\t\t\t\tthis.observer.next({\n\n\t\t\t\t\tname: NgRutterEventType.SUCCESS,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: publicToken\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tonSuccess(publicToken)\n\t\t\t},\n\t\t\tonLoad: () => {\n\t\t\t\tthis.observer.next({\n\t\t\t\t\tname: NgRutterEventType.LOAD\n\t\t\t\t})\n\t\t\t\tonLoad()\n\t\t\t},\n\t\t\tonExit: () => {\n\t\t\t\tthis.observer.next({\n\t\t\t\t\tname: NgRutterEventType.EXIT\n\t\t\t\t})\n\t\t\t\tonExit()\n\t\t\t},\n\t\t})\n\t\t\t\n\t\trutterInstance.open();\n\t}\n\n\tsetup() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tget(this.url, () => {\n\t\t\t\tresolve()\n\t\t\t});\n\t\t})\n\t}\n\n\tconstructor( options: NgRutterServiceOptions ) {\n\t\tthis.options = options;\n\t\tthis.observable = Observable.create((observer: Observer<any>) => {\n\t\t\tthis.observer = observer\n\t\t})\n\t}\n\n\tdestroy(subscriber: Subscription) {\n\t\tsubscriber.unsubscribe();\n\t}\n}","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { NgRutterService } from './ng-rutter.service';\n\n@Component({\n  selector: 'ng-rutter',\n  template: `<div class=\"btn\" (click)=\"load()\" \n[style.background-color]=\"backgroundColor\"\n[style.color]=\"color\"\n\n> {{ text }} </div>`,\n  styles: [`.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;position:relative;color:#fff;background-color:#007bff;font-family:Lato,sans-serif!important;cursor:pointer}`]\n})\n\nexport class NgRutterComponent implements OnInit {\n  @Input() text = 'Log in';\n  @Input() backgroundColor = '#000';\n  @Input() color = '#FFF';\n\n  @Output() onSuccess = new EventEmitter<string>();\n  @Output() onLoad = new EventEmitter();\n  @Output() onExit = new EventEmitter();\n\n  load() {\n    this.rutterService.loadRutter((publicToken) => {\n      this.onSuccess.emit(publicToken)\n    }, () => {\n      this.onLoad.emit()\n    }, () => {\n      this.onExit.emit()\n    });\n  }\n  \n  ngOnInit() {\n    this.rutterService.setup()\n  }\n\n  constructor(private rutterService: NgRutterService) {}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgRutterComponent } from './ng-rutter.component';\nimport { InjectionToken } from \"@angular/core\";\nimport { NgRutterServiceOptions, NgRutterService } from './ng-rutter.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n\tNgRutterService\n],\n  declarations: [\n    NgRutterComponent\n  ],\n  exports: [\n\tNgRutterComponent,\n  ]\n})\nexport class NgRutterModule {\n\n  static forRoot( options?: ModuleOptions ) : ModuleWithProviders {\n \n\t\treturn({\n\t\t\tngModule: NgRutterModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: FOR_ROOT_OPTIONS_TOKEN,\n\t\t\t\t\tuseValue: options\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: NgRutterServiceOptions,\n\t\t\t\t\tuseFactory: provideMyServiceOptions,\n\t\t\t\t\tdeps: [ FOR_ROOT_OPTIONS_TOKEN ]\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n }\n\n\n// I define the shape of the optional configuration data passed to the forRoot() method.\nexport interface ModuleOptions {\n  PUBLIC_API_KEY?: string;\n}\n\nexport var FOR_ROOT_OPTIONS_TOKEN = new InjectionToken<ModuleOptions>( \"forRoot() MyService configuration.\" );\n\nexport function provideMyServiceOptions( options?: ModuleOptions ) : NgRutterServiceOptions {\n \n\tvar serviceOptions = new NgRutterServiceOptions();\n\tif ( options ) {\n \n\t\tif ( typeof( options.PUBLIC_API_KEY ) === \"string\" ) {\n\t\t\tserviceOptions.PUBLIC_API_KEY = options.PUBLIC_API_KEY;\n\t\t}\n\t}\n \n\treturn( serviceOptions );\n}"]}