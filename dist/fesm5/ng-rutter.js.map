{"version":3,"file":"ng-rutter.js.map","sources":["ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.service.ts","ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.component.ts","ng://ng-rutter/src/app/modules/ng-rutter/ng-rutter.module.ts"],"sourcesContent":["// Import the core angular services.\nimport { Injectable } from \"@angular/core\";\nimport { get } from 'scriptjs';\nimport { Observer, Observable, Subscription, of } from \"rxjs\";\nimport { filter, share } from 'rxjs/operators'\n\ndeclare var Rutter: any;\n\nexport interface NgRutterEvent {\n\tname: string\n\tdata?: any\n}\n\nexport enum NgRutterEventType {\n\tSUCCESS = 'SUCCESS',\n\tLOAD = 'LOAD',\n\tEXIT = 'EXIT',\n}\n\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class NgRutterServiceOptions {\n\tpublic PUBLIC_API_KEY: string = '';\n}\n\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class NgRutterService {\n \n\tpublic options: NgRutterServiceOptions;\n\tpublic observable: Observable<NgRutterEvent>;\n\tpublic observer: Observer<any>\n\turl = 'https://unpkg.com/@rutter/rutter-link@latest';\n\n\topen() {\n\t\tthis.loadRutter(() => {}, () => {}, () => {})\n\t}\n\n\tloadRutter(onSuccess, onLoad, onExit) {\n\n\t\tvar rutterInstance = Rutter.create({\n\t\t\tpublicKey: this.options.PUBLIC_API_KEY,\n\t\t\tonSuccess: (publicToken) => {\n\t\t\t\tconsole.log(`inner success ${this.observer}`)\n\n\t\t\t\tthis.observer.next({\n\n\t\t\t\t\tname: NgRutterEventType.SUCCESS,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: publicToken\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tonSuccess(publicToken)\n\t\t\t},\n\t\t\tonLoad: () => {\n\t\t\t\tthis.observer.next({\n\t\t\t\t\tname: NgRutterEventType.LOAD\n\t\t\t\t})\n\t\t\t\tonLoad()\n\t\t\t},\n\t\t\tonExit: () => {\n\t\t\t\tthis.observer.next({\n\t\t\t\t\tname: NgRutterEventType.EXIT\n\t\t\t\t})\n\t\t\t\tonExit()\n\t\t\t},\n\t\t})\n\t\t\t\n\t\trutterInstance.open();\n\t}\n\n\tsetup() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tget(this.url, () => {\n\t\t\t\tresolve()\n\t\t\t});\n\t\t})\n\t}\n\n\tconstructor( options: NgRutterServiceOptions ) {\n\t\tthis.options = options;\n\t\tthis.observable = Observable.create((observer: Observer<any>) => {\n\t\t\tthis.observer = observer\n\t\t})\n\t}\n\n\tdestroy(subscriber: Subscription) {\n\t\tsubscriber.unsubscribe();\n\t}\n}","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { NgRutterService } from './ng-rutter.service';\n\n@Component({\n  selector: 'ng-rutter',\n  template: `<div class=\"btn\" (click)=\"load()\" \n[style.background-color]=\"backgroundColor\"\n[style.color]=\"color\"\n\n> {{ text }} </div>`,\n  styles: [`.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;position:relative;color:#fff;background-color:#007bff;font-family:Lato,sans-serif!important;cursor:pointer}`]\n})\n\nexport class NgRutterComponent implements OnInit {\n  @Input() text = 'Log in';\n  @Input() backgroundColor = '#000';\n  @Input() color = '#FFF';\n\n  @Output() onSuccess = new EventEmitter<string>();\n  @Output() onLoad = new EventEmitter();\n  @Output() onExit = new EventEmitter();\n\n  load() {\n    this.rutterService.loadRutter((publicToken) => {\n      this.onSuccess.emit(publicToken)\n    }, () => {\n      this.onLoad.emit()\n    }, () => {\n      this.onExit.emit()\n    });\n  }\n  \n  ngOnInit() {\n    this.rutterService.setup()\n  }\n\n  constructor(private rutterService: NgRutterService) {}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgRutterComponent } from './ng-rutter.component';\nimport { InjectionToken } from \"@angular/core\";\nimport { NgRutterServiceOptions, NgRutterService } from './ng-rutter.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n\tNgRutterService\n],\n  declarations: [\n    NgRutterComponent\n  ],\n  exports: [\n\tNgRutterComponent,\n  ]\n})\nexport class NgRutterModule {\n\n  static forRoot( options?: ModuleOptions ) : ModuleWithProviders {\n \n\t\treturn({\n\t\t\tngModule: NgRutterModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: FOR_ROOT_OPTIONS_TOKEN,\n\t\t\t\t\tuseValue: options\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: NgRutterServiceOptions,\n\t\t\t\t\tuseFactory: provideMyServiceOptions,\n\t\t\t\t\tdeps: [ FOR_ROOT_OPTIONS_TOKEN ]\n\t\t\t\t},\n\t\t\t\tNgRutterService\n\t\t\t]\n\t\t});\n\t}\n }\n\n\n// I define the shape of the optional configuration data passed to the forRoot() method.\nexport interface ModuleOptions {\n  PUBLIC_API_KEY?: string;\n}\n\nexport var FOR_ROOT_OPTIONS_TOKEN = new InjectionToken<ModuleOptions>( \"forRoot() MyService configuration.\" );\n\nexport function provideMyServiceOptions( options?: ModuleOptions ) : NgRutterServiceOptions {\n \n\tvar serviceOptions = new NgRutterServiceOptions();\n\tif ( options ) {\n \n\t\tif ( typeof( options.PUBLIC_API_KEY ) === \"string\" ) {\n\t\t\tserviceOptions.PUBLIC_API_KEY = options.PUBLIC_API_KEY;\n\t\t}\n\t}\n \n\treturn( serviceOptions );\n}"],"names":[],"mappings":"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"}
